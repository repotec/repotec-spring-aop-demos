package com.spring.aop.aspect;

import java.util.logging.Logger;

import org.aspectj.lang.JoinPoint;
import org.aspectj.lang.annotation.*;
import org.springframework.stereotype.Component;

@Aspect
@Component
public class TargetPointcutDesignatorAspect {
    private final static Logger logger = Logger.getLogger(TargetPointcutDesignatorAspect.class.getName());

    /**
     * before advice to match the join points where the target object is an instance of StudentRepositoryImpl.

     * in target, Spring AOP will create a proxy object that implements the StudentRepository interface and delegates
     * the method calls to the target object, which is an instance of StudentRepositoryImpl

     * StudentRepositoryImpl bean reference is not the actual object that implements StudentRepository interface, but a proxy object that
     * wraps the original object and adds some additional functionality
     *
     * the bean reference is an instance of a proxy class that is generated by Spring CGLIB, and the target object is an instance of StudentRepositoryImpl
     */
    @Before("target(com.spring.aop.repository.StudentRepositoryImpl)")
    public void beforeStudentRepositoryBeanReference(JoinPoint joinPoint){
        logger.info("inside target");

        // Print the class name of the bean reference
        logger.info("this:" + joinPoint.getThis().getClass().getName());
        // Print the class name of the target object
        logger.info("target:" + joinPoint.getTarget().getClass().getName());
    }

    /**
     * before advice to match the join points where the bean reference is an instance of StudentRepositoryImpl
     * @param joinPoint
     */
    @Before("this(com.spring.aop.repository.StudentRepositoryImpl)")
    public void beforeStudentRepositoryBeanReferences(JoinPoint joinPoint){
        // Print the class name of the bean reference
        logger.info("this:" + joinPoint.getThis().getClass().getName());
        // Print the class name of the target object
        logger.info("target:" + joinPoint.getTarget().getClass().getName());
    }
}